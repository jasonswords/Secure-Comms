import binascii
import sys

'''
The function used here are taken from rosetta code
This challenge is unfinished and returns a negative gcd value
'''

N = 26810032903919470751417184091163731146806121331508070138277149500696322442971096175884120790304857828577982069290158633180100251942955342417542170410605715464381639432699234575800532573171123313101039133182999372766586273295415906566816349148163606213448711796691911721106409801179014678228860658715782559345893999568360161119880197256475135027884453469771185252450235587582025015666381441336406498311093901010840648225477283137781817222768955048218849523758778037997640541529505267901219992736813659659861269305793309604318766412566007430086799932995256182029067580771661764264766250121073118028809461680663575310081
e1 = 65537
n2 = 26810032903919470751417184091163731146806121331508070138277149500696322442971096175884120790304857828577982069290158633180100251942955342417542170410605715464381639432699234575800532573171123313101039133182999372766586273295415906566816349148163606213448711796691911721106409801179014678228860658715782559345893999568360161119880197256475135027884453469771185252450235587582025015666381441336406498311093901010840648225477283137781817222768955048218849523758778037997640541529505267901219992736813659659861269305793309604318766412566007430086799932995256182029067580771661764264766250121073118028809461680663575310081
e2 = 3



c1 = 7260766775102654657103431656742441990353148979141061124307181644983295046231107327430423691452627616157433441672231524455424228382285023845396142577444059128435224669183854573983185393024329156189822712662511116569420962360954623545400595204562408256820513940689193850920644698878217512292950416554931062728033829588894529471625359766244038958641807661419724452655415523369090378106418026735257613942016521972218694980364584576257654630239995015408104622801206625513029332885950345185037430856958499992603649288484209396652173200391934831459927051606716189209524840476734248211027925057233244321218681091073539258752
c2 = 11470173511333387826671287679003421156929670961823461275017682796745559415904602218760953321935593676675323236825060054973638032835676476860429091158485500015124230815770279169046878292335353131961947230502423954865968276122363702577392093721031987918924919887457819356718276460712079449251273113171432305369682840183450263334464494258055631111604123197495702165241358930802926382937042734028068862458721


def string2int(my_str):
    return int(binascii.hexlify(my_str), 16)

def int2string(my_int):
    return binascii.unhexlify(format(my_int, "x").encode("utf-8")).decode("utf-8")

def xgcd(a,b):
	if b == 0:
	 return [1,0,a]
	else:
	 x,y,d = xgcd(b, a%b)
	 return [y, x - (a//b)*y, d]


def gcd(a, b):
    # Return the GCD of a and b using Euclid's Algorithm
    while a != 0:
        a, b = b % a, a
    return b

#c2 would be a and Modulus N would be m
def modInverse(a, m):

    if gcd(a, m) != 1:
        return None # no mod inverse if a & m aren't relatively prime

    u1, u2, u3 = 1, 0, a
    v1, v2, v3 = 0, 1, m
    while v3 != 0:
        q = u3 // v3 # // is the integer division operator
        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3
    return u1 % m






euclidConstants=xgcd(e1,e2)
a=euclidConstants[0]
b=euclidConstants[1]

eq1=modInverse(c2,N)


#(c1^a * eq1^-b) mod N
result1=pow(eq1,-b,N)
result2=pow(c1,a,N)

result3=result1*result2
finalresult=result3%N
#print finalresult

hexresult=hex(finalresult)[2:-1]
#print hexresult

print(int2string(hexresult))



