import binascii

'''
The challange was solved with many clues from the lecturer (Thanks Mark) and the use of this website (https://www.di-mgt.com.au/crt.html) which 
explains the math quite simplistic enough to understand how to achieve the flag.
With the given values and using the equation from the previously mentioned website, it quickly became a matter of plugging in the values
similar to the equation and getting the cubed root of the end value. The cubed root was gained using factor db website. With the cubed root retrieved,
the int to string method is used to print out the value.
'''

e1 = 3
n1 = 1001191535967882284769094654562963158339094991366537360172618359025855097846977704928598237040115495676223744383629803332394884046043603063054821999994629411352862317941517957323746992871914047324555019615398720677218748535278252779545622933662625193622517947605928420931496443792865516592262228294965047903627
c1 = 613757444204638278262310351562876531607487738717774407185252131147104492450160428757483976067628603514761619532764928239807564974590961450735755461481051283186240767490110455431475543041011912015289781128865893349142785039408178696523937605624371679605130950843591197358935516266254687080122972023592091964871

e2 = 3
n2 = 405864605704280029572517043538873770190562953923346989456102827133294619540434679181357855400199671537151039095796094162418263148474324455458511633891792967156338297585653540910958574924436510557629146762715107527852413979916669819333765187674010542434580990241759130158992365304284892615408513239024879592309
c2 = 22657108022478695797486965023447848250682406595690518779077232421899889165762724488153241456845951937121308084431913683848889272505486222688188138471999687468256556616878979818168438370975399291696045396880071048188564812795530986969364538462949239012254381251606438993964309325106863727351705595563360310007

e3 = 3
n3 = 1204664380009414697639782865058772653140636684336678901863196025928054706723976869222235722439176825580211657044153004521482757717615318907205106770256270292154250168657084197056536811063984234635803887040926920542363612936352393496049379544437329226857538524494283148837536712608224655107228808472106636903723
c3 = 311096000497881387953904724284440481805457233048982756757007020410000443330941053703716829538086459727079448020579354693958905904778381820371160626001594619419169121166486655254993091181369105737797409452734836563374374511516011594235202125201067840325349354834604004321427713901643355933701994777952169157646

def string2int(my_str):
    return int(binascii.hexlify(my_str), 16)

def int2string(my_int):
    return binascii.unhexlify(format(my_int, "x").encode("utf-8")).decode("utf-8")

def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient*x, x
        y, lasty = lasty - quotient*y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)

def modinv(a, m):
   g, x, y = extended_gcd(a, m)
   if g != 1:
       raise ValueError
   return x % m

'''
c1 = m pow(e) mod n1                m < n1
c2 = m pow(e) mod n2                m < n2
c3 = m pow(e) mod n3                m < n3

                                m pow(3) < (n1 * n2 * n3 )
                                    m pow(3) < N

 ----- Equation --------

N = n1n2n3 = 87 x 115 x 187 = 1870935
N1 = N/n1 = 115x187 = 21505; d1 = 21505-1 (mod 87) = 49
N2 = N/n2 = 87x187 = 16269; d2 = 16269-1 (mod 115) = 49
N3 = N/n3 = 87x115 = 10005; d3 = 10005-1 (mod 187) = 2
x ≡ c1N1d1 + c2N2d2 + c3N3d3 (mod N)
x = (43.21505.49) + (80.16269.49) + (65.10005.2) = 110386165 ≡ 1000 (mod 1870935) 
'''

N = (n1 * n2 *n3)
N1 = (n2 * n3)
N2 = (n1 * n3)
N3 = (n1 * n2)
d1 = modinv(N1, n1)
d2 = modinv(N2, n2)
d3 = modinv(N3, n3)

m = ((c1 * N1 * d1) + (c2 * N2 * d2) + (c3 * N3 * d3))%N

print(m)

print(int2string(11301526147910562593480172641704694161465423096780624709953790635636739226559722703113272085678800268554213086475832))



